实现原理：

 * 目前Go标准包没有为session提供支持，自行实现，最主要的三个问题：
 * 1. 生成全局唯一标识符（sessionid）
 * 2. 开辟数据存储空间
 * 3. 将session的全局唯一标示符发送给客户端
 *
 * 关于第三个问题，通常有两种方案：cookie和URL重写。
 * 1.Cookie：服务端通过设置Set-cookie头就可以将session的标识符传送到客户端，而客户端此后的每一次请求都会带上这个标识符
 * 2.URL重写：在返回给用户的页面里的所有的URL后面追加session标识符，这样用户在收到响应之后，无论点击响应页面里的哪个链接
 *           或提交表单，都会自动带上session标识符，如果客户端禁用了cookie的话，此种方案将会是首选。
 *
 * 本例采用方案1!

session包:
session包中定义了manager，这个是session的总对外句柄。
它包含一个storage变量。一个实际的程序实例中，只会有一种storage。
并且定义了session和storage接口。
其中storage是一种存储的实现。相当于session实际总句柄，包含多个session变量，session变量对应着每个用户的的session。
g_storages是hash，存储了所有的存储的实现，最终只会有一个生效的。
可以这么认为，最终manager中只会存储一个g_storages哈希的成员：
                                                            |==>key1:val1
                                                            |==>key1:val1
                                    |==>sid1:Memsession1===>|==>key1:val1
                                    |==>sid2:Memsession2    |
             |=>name:Memstorage====>|==>sid3:Memsession3    |...
             |                      |
             |                      |...
             |
g_storages==>|
             |=>name:Redisstorage
             |  
             |
             |.....

storages包：
实际的存储实现，实现了session和storage接口。
storage是一种存储的实现。相当于session实际总句柄，包含多个session变量，session变量对应着每个用户的的session。
在init中进行注册，即把自己的这套实现插入g_storages这个hash中。

main函数：
导入session和storages包，其中g_sessions是manager的变量。

综上：
一个session的get大致经历这样的流程：
1. 先得到具体的storage
2. 得到cookie值，这个值是sessid，对应一个用户。
3. 通过这个值找到底层存储的session，这个是某个用户的hash
4. 然后通过key获得最终的value






